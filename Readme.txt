First I completed the Node class by instantiating the field variables using the constructors and returning the corresponding variables in the other field methods of the Node class.
Then I completed the Queue class. The queue was implemented using an array of generic node. The size of array was equal to an integer capacity. The size of the queue was returned using a currentSize variable. The currentSize counted the number of non null elements in the array. The queue is a FIFO type data structure so, the dequeue method was implementing by removing and returning the first element of the array and by further shifting each element of the queue to 1 index leftwards. The enqueue method was implemented by inserting the element at the end of the queue. The other methods like isEmpty and is Full, of the Queue class were implemented using the variable currentSize.
Then I implemented the PriorityQueue class. The class was implemented similar to the Queue class. All methods except enqueue were implemented as like in the Queue class. For enqueue in the PriorityQueue I first added the new element at the end of the queue and then sorted the whole queue using bubble sort. This way the queue will always be sorted (assuming we start from an empty queue).
After that I implemented the Buyer and Seller classes. For the buyer class, I first completed the constructor and then for the buy method, I set up a lock using lock()    function ( Conditions full and empty were already associated with this lock in the bases.java ). Then I used a while loop which makes the empty condition to wait every time the catalog is empty. Further, I dequeued a node from catalog and print "Consumed" along with the priority of the node and used signalAll() method for full condition. At last I unlocked the lock.
Similar to the Buyer class I implemented the constructor of Seller class and set up the lock.I then used  a while loop which makes the full condition to wait every time the catalog is full. Further,I dequeued a node from inventory and enqueued it to the catalog and used signalAll() method for the empty condition. At last I unlocked the lock.
I then went on to the Assignment2Driver.java, I filled the elements from list (which is array list made from input file) to the inventory. Further, I made a seller class object and initialized thread corresponding to the object and started it. This was done numBuyers(integer) time using a for loop. Similarly, numSellers(integer) times, I made an object of seller class, initialized a thread corresponding to it and started it. 